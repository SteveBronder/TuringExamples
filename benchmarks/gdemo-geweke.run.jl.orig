using Stats, Distributions, Turing
using Gadfly

include("ASCIIPlot.jl")
import Gadfly.ElementOrFunction

# First add a method to the basic Gadfly.plot function for QQPair types (generated by Distributions.qqbuild())
Gadfly.plot(qq::QQPair, elements::ElementOrFunction...) = Gadfly.plot(x=qq.qx, y=qq.qy, Geom.point, Theme(highlight_width=0px), elements...)

# Now some shorthand functions
qqplot(x, y, elements::ElementOrFunction...) = Gadfly.plot(qqbuild(x, y), elements...)
qqnorm(x, elements::ElementOrFunction...) = qqplot(Normal(), x, Guide.xlabel("Theoretical Normal quantiles"), Guide.ylabel("Observed quantiles"), elements...)

NSamples = 30000

@model gdemo2(x, bkstep) = begin
    y = similar(x)
    if bkstep == false
        # Forward Sample
        s ~ InverseGamma(2,3)
        m ~ Normal(0,sqrt(s))
        y[1] ~ Normal(m, sqrt(s))
        y[2] ~ Normal(m, sqrt(s))
    elseif bkstep == true
        # Backward Step 1: theta ~ theta | x
        s ~ InverseGamma(2,3)
        m ~ Normal(0,sqrt(s))
        x[1] ~ Normal(m, sqrt(s))
        x[2] ~ Normal(m, sqrt(s))
        # Backward Step 2: x ~ x | theta
        y[1] = rand(Normal(m, sqrt(s)))
        y[2] = rand(Normal(m, sqrt(s)))
    end
    return s, m, y
end

<<<<<<< HEAD:test/gdemo-geweke.jl
fw = PG(20, 3000)
s = @sample(gdemo2([1.5, 2], false), fw);
describe(s)


bk = Gibbs(10, PG(10,10, :s, :y), HMC(1, 0.25, 5, :m));
# bk = PG(20,10);
# bk = HMC(10, 0.25, 5, :m)

N = 300
=======
fw = PG(20, NSamples)
# bk = Gibbs(10, PG(10,10, :s, :y), HMC(1, 0.25, 5, :m));
bk = PG(20,50);

s = @sample(gdemo2([1.5, 2], false), fw);
describe(s)

N = div(NSamples, 50)

>>>>>>> master:benchmarks/gdemo-geweke.run.jl
x = [s[:y][1]...]
s_bk = Array{Turing.Chain}(N)

for i = 1:N
    s_bk[i] = @sample(gdemo2(x, true), bk);
    x = [s_bk[i][:y][end]...];
end

s2 = vcat(s_bk...);
describe(s2)

plot_m = qqplot(s[:m], s2[:m], Coord.cartesian(xmin=-20, xmax=20, ymin=-20, ymax=20))
draw(PNG("plot_m_PG$(replace(string(typeof(bk)), "Turing.", "")).png", 7inch, 7inch), plot_m)


<<<<<<< HEAD:test/gdemo-geweke.jl
plot_s = qqplot(s[:s], s2[:s], Coord.cartesian(xmin=0, xmax=100, ymin=0, ymax=100))
draw(PNG("plot_s_PG$(replace(string(typeof(bk)), "Turing.", "")).png", 7inch, 7inch), plot_s)
=======
qqplot(s[:m], s2[:m])
qqplot(s[:s], s2[:s])

qqs = qqbuild(s[:s], s2[:s])
println("QQ plot for s:")
show(scatterplot(qqs.qx, qqs.qy))

println("QQ plot for s (removing last 50 quantiles):")
show(scatterplot(qqs.qx[51:end-50], qqs.qy[51:end-50]))

qqm = qqbuild(s[:m], s2[:m])
println("QQ plot for m:")
show(scatterplot(qqm.qx, qqm.qy))

println("QQ plot for m (removing first and last 50 quantiles):")
show(scatterplot(qqm.qx[51:end-50], qqm.qy[51:end-50]))
>>>>>>> master:benchmarks/gdemo-geweke.run.jl
